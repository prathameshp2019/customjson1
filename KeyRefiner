import { Directive, HostListener, NgModule, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Directive({
  selector: 'key-refiner'
})
export class KeyRefiner {

  static KEYS = {
    TAB: 9,
    RETURN: 13,
    ESC: 27,
    BACKSPACE: 8,
    DELETE: 46
  };

  regex: RegExp;

  private _pattern: any;

  public get pattern(): any {
    return this._pattern;
  }

  @Input('key-refiner')  public set pattern(value: any) {
    this._pattern = value;
    this.regex = value;
  }

  constructor() { }


  getKey(e: KeyboardEvent) {
    const k = e.keyCode || e.charCode || e.which;
    return k;
  }

  isSpecialKey(e: KeyboardEvent) {
    const k = e.keyCode;
    const specialKeyArr = [9, 13, 27];
    return specialKeyArr.indexOf(k, 0);
  }

  @HostListener('keypress', ['$event'])
  onKeyPress(e: KeyboardEvent) {


    if (e.ctrlKey || e.altKey) {
      return;
    }

    const k = this.getKey(e);

    if (k === 13) {
      return;
    }

    const cc = String.fromCharCode(k);
    let ok = true;

    if (this.isSpecialKey(e) || !cc) {
      return;
    }

    ok = this.regex.test(cc);

    if (!ok) {
      e.preventDefault();
    }
  }


}

@NgModule({
  imports: [CommonModule],
  exports: [KeyRefiner],
  declarations: [KeyRefiner]
})
export class KeyRefinerModule { }
